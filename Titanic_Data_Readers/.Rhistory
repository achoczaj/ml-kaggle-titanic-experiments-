for (i in 1:362) {
new_data <- page %>%
html_nodes("tr:nth-child(7) td") %>%
html_text()
df_all <- rbind(df_all, new_data)
}
df_all <- data.frame()
df_all
for (i in 1:362) {
new_data <- page %>%
html_nodes("tr:nth-child(7) td") %>%
html_text()
df_all <- rbind(df_all, new_data)
}
df_all
class(df_all)
df_all %>% View()
?sprintf
for (i in 1:362) {
new_data <- page %>%
html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
df_all <- rbind(df_all, new_data)
}
df_all %>% View()
for (i in 1:362) {
new_data <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
df_all <- rbind(df_all, new_data)
}
df_all %>% View()
paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")
sprintf("tr:nth-child(%d) td", i)
new_data <- data.frame()
i <- 4 ## only for test
new_data <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
df_all <- rbind(df_all, new_data)
df_all <- tibble()
new_data <- tibble()
i <- 4 ## only for test
new_data <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
df_all <- rbind(df_all, new_data)
df_all %>% View()
?tibble_
seq_along(12)
df_all <- tibble()
output <- vector("character", length(4))
i <- 4 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
df_all <- rbind(df_all, output)
class(df_all)
df_all
df_all <- tibble()
output <- vector("character", length(4))
i <- 5 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
df_all <- rbind(df_all, output)
df_all
df_all <- tibble()
output <- vector("character", length(4))
i <- 1 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
output
i <- 2 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
output
i <- 3 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
output
i <- 4 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
output
df_all <- tibble()
output <- vector("character", length(4))
i <- 2 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
output
df_all <- rbind(df_all, output)
df_all
i <- 3 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
output
df_all <- rbind(df_all, output)
df_all
i <- 4 ## only for test
output <- page %>%
html_nodes(paste( c("tr:nth-child(", as.character(i), ") td"), collapse = "")) %>%
# html_nodes(sprintf("tr:nth-child(%d) td", i)) %>%
html_text()
output
df_all <- rbind(df_all, output)
df_all
page
substr(page[2], start = 100, stop = 200)
substr(page[2], start = 1, stop = 200)
substr(page, start = 1, stop = 200)
substr(page, start = 1, stop = 400)
substr(page, start = 1, stop = 2000)
page
page[2]
CLASS(page)
class(page)
text <- page %>%
substr(.[2], start = 1, stop = 2000)
text <- page %>%
substr(start = 1, stop = 2000)
text
text <- page %>%
html_nodes("tr") %>%
substr(start = 1, stop = 2000)
text
text <- page %>%
html_nodes("td") %>%
substr(start = 1, stop = 2000)
text
text <- page %>%
html_nodes("td \\n") %>%
substr(start = 1, stop = 2000)
text <- page %>%
html_nodes("td") %>%
substr(start = 1, stop = 2000)
text <- page %>%
html_nodes("td") %>%
substr(start = 1, stop = 20)
text
text <- page %>%
html_nodes("td") %>%
substr(start = 1, stop = 40)
text[1:20]
text <- page %>%
html_nodes("td td") %>%
substr(start = 1, stop = 40)
text[1:20]
text <- page %>%
html_nodes("[itemprop='articleBody'] td") %>%
substr(start = 1, stop = 40)
text[1:20]
text <- page %>%
html_nodes("[itemprop='articleBody'] .Normal table") %>%
html_table()
text <- page %>%
html_nodes("[itemprop='articleBody'] .Normal table") %>%
html_table(, fill=TRUE)
text
tabl <- page %>%
html_nodes("[itemprop='articleBody'] .Normal table") %>%
html_table(fill=TRUE)
tabl %>%  View()
titanic_cabin_tabl <- page %>%
html_nodes("[itemprop='articleBody'] .Normal table") %>%
html_table(fill=FALSE)
titanic_cabin_tabl %>%  View()
titanic_cabin_tabl <- page %>%
html_nodes("[itemprop='articleBody'] .Normal table") %>%
html_table(fill=TRUE)
titanic_cabin_tabl %>%  View()
write.csv(titanic_cabin_tabl, file="Titanic_Cabin_List_v1.csv", row.names = TRUE)
?html_
library(rvest)
Pict_alt <- html %>%
html_nodes("#manifest td:nth-child(8)")  %>%
html_node("[class='profile']")  %>%
html_attr("alt")
try({
html <- read_html(link)
# Get the full name of passenger
FullName <- html %>%
html_nodes("#manifest span [itemprop='name'] ")  %>%
html_text()
if (is.character(FullName) && length(FullName) == 0L ) {
next
}
# Get the family name of passenger
FamilyName <- html %>%
html_nodes("#manifest span [itemprop='familyName'] ")  %>%
html_text()
# Get the first name/names of passenger
GivenName <- html %>%
html_nodes("#manifest span [itemprop='givenName'] ")  %>%
html_text()
# Get the honorific Prefix of passenger
HonorificPrefix <- html %>%
html_nodes("#manifest span [itemprop='honorificPrefix'] ")  %>%
html_text()
# Get the age of passenger
Age <- html %>%
html_nodes("#manifest td:nth-child(2)")  %>%
html_text() %>%
## clean up with gsub(pattern, replacement, x)
gsub("[\r\n]", "", .) %>%
trimws()
# Get the Class of passenger or Dep of crew member
PasClass_CrewDep <- html %>%
html_nodes("#manifest td:nth-child(3)")  %>%
html_text() #%>%
#trimws()
# Get the Ticket No and Fare of passenger
TicketNo_Fare_concatenated <- html %>%
html_nodes("#manifest td:nth-child(4)")  %>%
html_text() %>%
trimws()
#====================================
## dummy data tests:
# TicketNo_Fare_concatenated <- c("", "£13 11s", "336439£7 15s","87£3", "13509£26 11s", "£10 10s 5p" )
# Separate Ticket No from Fare
TicketNo_Fare_list <-
TicketNo_Fare_concatenated %>%
str_split("£", simplify = FALSE)  ## use simplify = FALSE to return a list
# Get the Ticket_Full_No of passenger
Ticket_Full_No <-
sapply(TicketNo_Fare_list, `[`, 1)
## fill empty values with NA
Ticket_Full_No[Ticket_Full_No == ""] <- NA
# Get the TicketFare values for tickets
TicketFare_vector <-
sapply(TicketNo_Fare_list, `[`, 2)
## fill empty values with NA
TicketFare_vector[TicketFare_vector == ""] <- NA
## create TicketFare matrix
TicketFare_matrix <-
TicketFare_vector %>%
str_split(boundary("word"), simplify = TRUE)  ## use simplify = TRUE to return a matrix
## check if matrix has 3 columns - it should
## if not add missing columns with NA values
no_col <- ncol(TicketFare_matrix)
while (3-no_col) {
TicketFare_matrix <- cbind(TicketFare_matrix, NA)
no_col <- no_col+1
}
## remove letters (char) from values
if (ncol(TicketFare_matrix)<=3 || ncol(TicketFare_matrix)==0) {
try({
TicketFare_matrix[,1] <- str_replace(TicketFare_matrix[,1], "\u00A3", "") ## remove £ char, if any
TicketFare_matrix[,2] <- str_replace(TicketFare_matrix[,2], "s", "") ## remove s char, if any
TicketFare_matrix[,3] <- str_replace(TicketFare_matrix[,3], "p", "") ## remove d char, if any
## fill empty values with NA
TicketFare_matrix[TicketFare_matrix == ""] <- NA
})
} else {
## generate error values as mess
TicketFare_matrix[,c(1,2,3)] <- -1
}
## convert char to integers
Fare__Old_Pounds <- as.integer(TicketFare_matrix[,1])
Fare__Old_Shillings <- as.integer(TicketFare_matrix[,2])
Fare__Old_Pennies <- as.integer(TicketFare_matrix[,3])
## create int tibble
TicketFare_tbl_df <- tibble(Fare__Old_Pounds, Fare__Old_Shillings, Fare__Old_Pennies)
## convert Fare to GBP
TicketFares <- TicketFare_tbl_df %>%
mutate(Fare_in_GBP = ifelse(!is.na(Fare__Old_Pounds), Fare__Old_Pounds, 0)
+ ifelse(!is.na(Fare__Old_Shillings), Fare__Old_Shillings/20, 0)
+ ifelse(!is.na(Fare__Old_Pennies), Fare__Old_Pennies/250, 0) )
## change 0 to NA in Fare_in_GBP
TicketFares$Fare_in_GBP[is.na(Fare__Old_Pounds)==TRUE] <- NA
# Get the Port of Embarkment of passenger
PortEmba <- html %>%
html_nodes("#manifest td:nth-child(5)") %>%
html_text() %>%
trimws()
PortEmba[PortEmba == ""] <- NA
# Get the job of passenger / crew
Job <- html %>%
html_nodes("#manifest td:nth-child(6)") %>%
html_text() %>%
gsub("[\r\n]", "", .) %>%
trimws()
Job[Job == ""] <- NA
# Get the Boat or [Body] of passenger / crew
Boat_Body <- html %>%
html_nodes("#manifest td:nth-child(7)") %>%
html_text()
Boat_Body[Boat_Body == ""] <- NA
# Get the link to passenger webpage
link_temp <-
html %>%
html_nodes("#manifest span [itemprop='url'] ")  %>%
html_attr("href")
Passenger_link <-
ifelse(is.na(link_temp), NA, paste('https://www.encyclopedia-titanica.org', link_temp, sep=''))
# Get the passenger status: survivor/victim from his link
Passenger_status <-
if(str_detect(link_temp, "-survivor") ) {
"Survivor"
} else if (str_detect(link_temp, "-victim") ) {
"Victim"
} else { "Other"}
# Get the link to Pict of passenger / crew member
Pict_link_part2 <- html %>%
html_nodes("#manifest td:nth-child(8)")  %>%
html_node("[class='profile']")  %>%
html_attr("src")
Pict_link <-
ifelse(is.na(Pict_link_part2), NA, paste('https://www.encyclopedia-titanica.org', Pict_link_part2, sep=''))
# Get the ALT attribute of Pict of passenger / crew member
Pict_alt <- html %>%
html_nodes("#manifest td:nth-child(8)")  %>%
html_node("[class='profile']")  %>%
html_attr("alt")
## end of try() ##
})
library(magrittr)
library(xml2)
library(rvest)
library(tidyr)
library(tidyverse)
titanic_all_results <- data.frame()
for(i in 0:81) {
i <- 30 # only for tests
link <- paste( c("https://www.encyclopedia-titanica.org/titanic-ages/", as.character(i),".html"), collapse = "")
try({
html <- read_html(link)
# Get the full name of passenger
FullName <- html %>%
html_nodes("#manifest span [itemprop='name'] ")  %>%
html_text()
if (is.character(FullName) && length(FullName) == 0L ) {
next
}
# Get the family name of passenger
FamilyName <- html %>%
html_nodes("#manifest span [itemprop='familyName'] ")  %>%
html_text()
# Get the first name/names of passenger
GivenName <- html %>%
html_nodes("#manifest span [itemprop='givenName'] ")  %>%
html_text()
# Get the honorific Prefix of passenger
HonorificPrefix <- html %>%
html_nodes("#manifest span [itemprop='honorificPrefix'] ")  %>%
html_text()
# Get the age of passenger
Age <- html %>%
html_nodes("#manifest td:nth-child(2)")  %>%
html_text() %>%
## clean up with gsub(pattern, replacement, x)
gsub("[\r\n]", "", .) %>%
trimws()
# Get the Class of passenger or Dep of crew member
PasClass_CrewDep <- html %>%
html_nodes("#manifest td:nth-child(3)")  %>%
html_text() #%>%
#trimws()
# Get the Ticket No and Fare of passenger
TicketNo_Fare_concatenated <- html %>%
html_nodes("#manifest td:nth-child(4)")  %>%
html_text() %>%
trimws()
#====================================
## dummy data tests:
# TicketNo_Fare_concatenated <- c("", "£13 11s", "336439£7 15s","87£3", "13509£26 11s", "£10 10s 5p" )
# Separate Ticket No from Fare
TicketNo_Fare_list <-
TicketNo_Fare_concatenated %>%
str_split("£", simplify = FALSE)  ## use simplify = FALSE to return a list
# Get the Ticket_Full_No of passenger
Ticket_Full_No <-
sapply(TicketNo_Fare_list, `[`, 1)
## fill empty values with NA
Ticket_Full_No[Ticket_Full_No == ""] <- NA
# Get the TicketFare values for tickets
TicketFare_vector <-
sapply(TicketNo_Fare_list, `[`, 2)
## fill empty values with NA
TicketFare_vector[TicketFare_vector == ""] <- NA
## create TicketFare matrix
TicketFare_matrix <-
TicketFare_vector %>%
str_split(boundary("word"), simplify = TRUE)  ## use simplify = TRUE to return a matrix
## check if matrix has 3 columns - it should
## if not add missing columns with NA values
no_col <- ncol(TicketFare_matrix)
while (3-no_col) {
TicketFare_matrix <- cbind(TicketFare_matrix, NA)
no_col <- no_col+1
}
## remove letters (char) from values
if (ncol(TicketFare_matrix)<=3 || ncol(TicketFare_matrix)==0) {
try({
TicketFare_matrix[,1] <- str_replace(TicketFare_matrix[,1], "\u00A3", "") ## remove £ char, if any
TicketFare_matrix[,2] <- str_replace(TicketFare_matrix[,2], "s", "") ## remove s char, if any
TicketFare_matrix[,3] <- str_replace(TicketFare_matrix[,3], "p", "") ## remove d char, if any
## fill empty values with NA
TicketFare_matrix[TicketFare_matrix == ""] <- NA
})
} else {
## generate error values as mess
TicketFare_matrix[,c(1,2,3)] <- -1
}
## convert char to integers
Fare__Old_Pounds <- as.integer(TicketFare_matrix[,1])
Fare__Old_Shillings <- as.integer(TicketFare_matrix[,2])
Fare__Old_Pennies <- as.integer(TicketFare_matrix[,3])
## create int tibble
TicketFare_tbl_df <- tibble(Fare__Old_Pounds, Fare__Old_Shillings, Fare__Old_Pennies)
## convert Fare to GBP
TicketFares <- TicketFare_tbl_df %>%
mutate(Fare_in_GBP = ifelse(!is.na(Fare__Old_Pounds), Fare__Old_Pounds, 0)
+ ifelse(!is.na(Fare__Old_Shillings), Fare__Old_Shillings/20, 0)
+ ifelse(!is.na(Fare__Old_Pennies), Fare__Old_Pennies/250, 0) )
## change 0 to NA in Fare_in_GBP
TicketFares$Fare_in_GBP[is.na(Fare__Old_Pounds)==TRUE] <- NA
# Get the Port of Embarkment of passenger
PortEmba <- html %>%
html_nodes("#manifest td:nth-child(5)") %>%
html_text() %>%
trimws()
PortEmba[PortEmba == ""] <- NA
# Get the job of passenger / crew
Job <- html %>%
html_nodes("#manifest td:nth-child(6)") %>%
html_text() %>%
gsub("[\r\n]", "", .) %>%
trimws()
Job[Job == ""] <- NA
# Get the Boat or [Body] of passenger / crew
Boat_Body <- html %>%
html_nodes("#manifest td:nth-child(7)") %>%
html_text()
Boat_Body[Boat_Body == ""] <- NA
# Get the link to passenger webpage
link_temp <-
html %>%
html_nodes("#manifest span [itemprop='url'] ")  %>%
html_attr("href")
Passenger_link <-
ifelse(is.na(link_temp), NA, paste('https://www.encyclopedia-titanica.org', link_temp, sep=''))
# Get the passenger status: survivor/victim from his link
Passenger_status <-
if(str_detect(link_temp, "-survivor") ) {
"Survivor"
} else if (str_detect(link_temp, "-victim") ) {
"Victim"
} else { "Other"}
# Get the link to Pict of passenger / crew member
Pict_link_part2 <- html %>%
html_nodes("#manifest td:nth-child(8)")  %>%
html_node("[class='profile']")  %>%
html_attr("src")
Pict_link <-
ifelse(is.na(Pict_link_part2), NA, paste('https://www.encyclopedia-titanica.org', Pict_link_part2, sep=''))
# Get the ALT attribute of Pict of passenger / crew member
Pict_alt <- html %>%
html_nodes("#manifest td:nth-child(8)")  %>%
html_node("[class='profile']")  %>%
html_attr("alt")
## end of try() ##
})
new_data <- data.frame(FamilyName, GivenName, HonorificPrefix, Age, PasClass_CrewDep, Ticket_Full_No, TicketFares, PortEmba, Job, Passenger_link, Pict_link, Pict_alt, Boat_Body, Passenger_status, FullName, stringsAsFactors = FALSE)
# new_data %>% View()
# add new column with info for webpage source name
new_data$Website_AgeNo <- i
## '0' for https://.../0.html
titanic_all_results <- rbind(titanic_all_results, new_data)
## end of for loop ##
## reading webpages ##
}
library(stringr)
dim(titanic_all_results)
titanic_all_results %>% View()
library(magrittr)
library(xml2)
library(rvest)
library(tidyr)
library(tidyverse)
library(stringr)
titanic_all_results <- data.frame()
i <- 30 # only for tests
link <- paste( c("https://www.encyclopedia-titanica.org/titanic-ages/", as.character(i),".html"), collapse = "")
html <- read_html(link)
link_temp <-
html %>%
html_nodes("#manifest span [itemprop='url'] ")  %>%
html_attr("href")
link_temp
link_temp <-
html %>%
html_nodes("#manifest span ")  %>%
html_attr("href")
link_temp
