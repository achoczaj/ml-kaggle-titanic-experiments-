{
    "collab_server" : "",
    "contents" : "#---------------------------------------------\n# \n# Tests to scrape the data about Titanic's crew and passangers to collect their ages, jobs\n# from: https://www.encyclopedia-titanica.org/titanic-ages/0.html (age < 1 Y)\n# ...\n# to: https://www.encyclopedia-titanica.org/titanic-ages/81.html (age 81 Y) \n#\n#---------------------------------------------\n\n\n# Install some goodness:\n# install.packages(\"magrittr\")\n# install.packages(\"xml2\")\n# install.packages(\"rvest\")\n\nlibrary(magrittr)\n## provides “pipe”-like operator %>% with which you may pipe a value forward into an expression or function call\n\nlibrary(xml2)\n\nlibrary(rvest)\n## Wrappers around the 'xml2' and 'httr' packages to make it easy to download, then manipulate, HTML and XML.\n## Scrape (or harvest) data from html web pages, inspired by libraries like beautiful soup\n\nlibrary(tidyr)\n\nlibrary(tidyverse)\n\nlibrary(stringr)\n\n# define test page addresses\n# html_0 <- read_html(\"https://www.encyclopedia-titanica.org/titanic-ages/0.html\")\n# html_1 <- read_html(\"https://www.encyclopedia-titanica.org/titanic-ages/1.html\")\n\n\n# use R to extract the values from webpage \n## use e.g.  selectorgadget to figure out which css selector matches the data you want\n##read vignette(\"selectorgadget\")\n\ntitanic_all_results <- data.frame()\nfor(i in 0:81) {\n  # i <- 30 # only for tests\n  link <- paste( c(\"https://www.encyclopedia-titanica.org/titanic-ages/\", as.character(i),\".html\"), collapse = \"\") \n\n  try({\n    html <- read_html(link)\n    \n    \n    # Get the full name of passenger\n    FullName <- html %>% \n      html_nodes(\"#manifest span [itemprop='name'] \")  %>%\n      html_text()\n    \n    if (is.character(FullName) && length(FullName) == 0L ) {\n      next\n    }\n    \n    # Get the family name of passenger\n    FamilyName <- html %>% \n      html_nodes(\"#manifest span [itemprop='familyName'] \")  %>%\n      html_text()\n    \n    \n    # Get the first name/names of passenger\n    GivenName <- html %>% \n      html_nodes(\"#manifest span [itemprop='givenName'] \")  %>%\n      html_text()\n    \n    \n    # Get the honorific Prefix of passenger\n    HonorificPrefix <- html %>% \n      html_nodes(\"#manifest span [itemprop='honorificPrefix'] \")  %>%\n      html_text()\n    \n    \n    # Get the age of passenger\n    Age <- html %>% \n      html_nodes(\"#manifest td:nth-child(2)\")  %>%\n      html_text() %>% \n      ## clean up with gsub(pattern, replacement, x)\n      gsub(\"[\\r\\n]\", \"\", .) %>%\n      trimws()\n    \n    # Get the Class of passenger or Dep of crew member\n    PasClass_CrewDep <- html %>% \n      html_nodes(\"#manifest td:nth-child(3)\")  %>%\n      html_text() #%>% \n      #trimws()\n    \n    \n    # Get the Ticket No and Fare of passenger\n    TicketNo_Fare_concatenated <- html %>% \n      html_nodes(\"#manifest td:nth-child(4)\")  %>%\n      html_text() %>% \n      trimws()\n    \n    #====================================\n    ## dummy data tests: \n    # TicketNo_Fare_concatenated <- c(\"\", \"£13 11s\", \"336439£7 15s\",\"87£3\", \"13509£26 11s\", \"£10 10s 5p\" )\n    \n    # Separate Ticket No from Fare\n    TicketNo_Fare_list <-\n      TicketNo_Fare_concatenated %>% \n      str_split(\"£\", simplify = FALSE)  ## use simplify = FALSE to return a list\n    \n    \n    # Get the Ticket_Full_No of passenger\n    Ticket_Full_No <- \n      sapply(TicketNo_Fare_list, `[`, 1)\n    ## fill empty values with NA\n    Ticket_Full_No[Ticket_Full_No == \"\"] <- NA\n    \n    \n    \n    # Get the TicketFare values for tickets\n    TicketFare_vector <- \n      sapply(TicketNo_Fare_list, `[`, 2)\n    \n    ## fill empty values with NA\n    TicketFare_vector[TicketFare_vector == \"\"] <- NA\n    \n    ## create TicketFare matrix\n    TicketFare_matrix <- \n      TicketFare_vector %>% \n      str_split(boundary(\"word\"), simplify = TRUE)  ## use simplify = TRUE to return a matrix\n    \n    \n    ## check if matrix has 3 columns - it should\n    ## if not add missing columns with NA values\n    no_col <- ncol(TicketFare_matrix)\n    while (3-no_col) {\n      TicketFare_matrix <- cbind(TicketFare_matrix, NA) \n      no_col <- no_col+1\n      }\n  \n    ## remove letters (char) from values\n    if (ncol(TicketFare_matrix)<=3 || ncol(TicketFare_matrix)==0) {\n    try({\n      TicketFare_matrix[,1] <- str_replace(TicketFare_matrix[,1], \"\\u00A3\", \"\") ## remove £ char, if any \n      TicketFare_matrix[,2] <- str_replace(TicketFare_matrix[,2], \"s\", \"\") ## remove s char, if any\n      TicketFare_matrix[,3] <- str_replace(TicketFare_matrix[,3], \"p\", \"\") ## remove d char, if any\n      \n      ## fill empty values with NA\n      TicketFare_matrix[TicketFare_matrix == \"\"] <- NA  \n    })  \n    } else {\n      ## generate error values as mess\n      TicketFare_matrix[,c(1,2,3)] <- -1\n    }  \n    \n    ## convert char to integers\n    Fare__Old_Pounds <- as.integer(TicketFare_matrix[,1])\n    Fare__Old_Shillings <- as.integer(TicketFare_matrix[,2])\n    Fare__Old_Pennies <- as.integer(TicketFare_matrix[,3])\n    \n    ## create int tibble \n    TicketFare_tbl_df <- tibble(Fare__Old_Pounds, Fare__Old_Shillings, Fare__Old_Pennies)\n\n    ## convert Fare to GBP\n    TicketFares <- TicketFare_tbl_df %>% \n      mutate(Fare_in_GBP = ifelse(!is.na(Fare__Old_Pounds), Fare__Old_Pounds, 0) \n             + ifelse(!is.na(Fare__Old_Shillings), Fare__Old_Shillings/20, 0)\n             + ifelse(!is.na(Fare__Old_Pennies), Fare__Old_Pennies/250, 0) )\n    \n    ## change 0 to NA in Fare_in_GBP \n    TicketFares$Fare_in_GBP[is.na(Fare__Old_Pounds)==TRUE] <- NA\n\n    \n    # Get the Port of Embarkment of passenger\n    PortEmba <- html %>% \n      html_nodes(\"#manifest td:nth-child(5)\") %>% \n      html_text() %>% \n      trimws()\n    PortEmba[PortEmba == \"\"] <- NA \n    \n    # Get the job of passenger / crew\n    Job <- html %>% \n      html_nodes(\"#manifest td:nth-child(6)\") %>% \n      html_text() %>% \n      gsub(\"[\\r\\n]\", \"\", .) %>%\n      trimws()\n    Job[Job == \"\"] <- NA\n    \n    \n    # Get the Boat or [Body] of passenger / crew\n    Boat_Body <- html %>% \n      html_nodes(\"#manifest td:nth-child(7)\") %>% \n      html_text()\n    Boat_Body[Boat_Body == \"\"] <- NA\n    \n    # Get the link to passenger webpage\n    link_temp <- \n      html %>% \n      html_nodes(\"#manifest span [itemprop='url'] \")  %>%\n      html_attr(\"href\")  \n    \n    Passenger_link <-\n      ifelse(is.na(link_temp), NA, paste('https://www.encyclopedia-titanica.org', link_temp, sep=''))\n    \n    # Get the passenger status: survivor/victim from his link\n    Passenger_status <-\n      if(str_detect(link_temp, \"-survivor\") ) {\n        \"Survivor\"\n      } else if (str_detect(link_temp, \"-victim\") ) {\n          \"Victim\"\n        } else { \"Other\"}\n    \n    \n    # Get the link to Pict of passenger / crew member\n    Pict_link_part2 <- html %>% \n      html_nodes(\"#manifest td:nth-child(8)\")  %>%\n      html_node(\"[class='profile']\")  %>%\n      html_attr(\"src\")\n    \n    Pict_link <- \n      ifelse(is.na(Pict_link_part2), NA, paste('https://www.encyclopedia-titanica.org', Pict_link_part2, sep=''))\n    \n    \n    # Get the ALT attribute of Pict of passenger / crew member\n    Pict_alt <- html %>% \n      html_nodes(\"#manifest td:nth-child(8)\")  %>%\n      html_node(\"[class='profile']\")  %>%\n      html_attr(\"alt\")\n  \n  ## end of try() ## \n})\n\n\n  new_data <- data.frame(FamilyName, GivenName, HonorificPrefix, Age, PasClass_CrewDep, Ticket_Full_No, TicketFares, PortEmba, Job, Passenger_link, Pict_link, Pict_alt, Boat_Body, Passenger_status, FullName, stringsAsFactors = FALSE) \n  # new_data %>% View()\n\n  # add new column with info for webpage source name \n  new_data$Website_AgeNo <- i\n  ## '0' for https://.../0.html\n  \n  titanic_all_results <- rbind(titanic_all_results, new_data)\n\n## end of for loop ##\n## reading webpages ##  \n}\n\ndim(titanic_all_results)\n#> 2225 19\n## page with ages < 1 not included in process - webpage issue\n## Should be 2249 people according to the webpage info.\n\ntitanic_all_results %>% View()\n\n\n# Write df_all dataframe as .csv file\nwrite.csv(titanic_all_results, file=\"Titanic_Crew_and_Passangers_List_v2.2.csv\", row.names = TRUE)\n",
    "created" : 1503666087287.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "130|22|133|6|\n145|12|148|4|\n",
    "hash" : "1917925020",
    "id" : "1EF86772",
    "lastKnownWriteTime" : 1504185856,
    "last_content_update" : 1504189129755,
    "path" : "C:/Labs_ML/Kaggle/C01/R-scripts/Titanic_Data_Readers/Titanic_website_data_reader_v2_details.R",
    "project_path" : "Titanic_website_data_reader_v2_details.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}